apiVersion: v1
kind: ConfigMap
metadata:
  name: mysql-init-script
  labels:
    app: mysql
data:
  init.sql: |
    CREATE USER IF NOT EXISTS 'devuser'@'%' IDENTIFIED BY 'devpassword';
    GRANT ALL PRIVILEGES ON devsecopsdb.* TO 'devuser'@'%';
    FLUSH PRIVILEGES;

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
  labels:
    app: mysql
spec:
  serviceName: mysql-service
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - name: mysql
        image: mysql:8.0
        env:
        - name: MYSQL_ROOT_PASSWORD
          value: rootpassword # Change to a secure password
        - name: MYSQL_DATABASE
          value: devsecopsdb
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: init-script-volume
          mountPath: /docker-entrypoint-initdb.d
      securityContext:
        runAsNonRoot: false
      initContainers:
      - name: init-mysql-script
        image: busybox:1.34
        command: ['sh', '-c', 'cp /config/init.sql /init-scripts/']
        volumeMounts:

        - name: init-script
          mountPath: /config
        - name: init-script-volume
          mountPath: /init-scripts
        - name: mysql-data
          mountPath: /var/lib/mysql
      volumes:
      - name: init-script
        configMap:
          name: mysql-init-script
      - name: init-script-volume
        emptyDir: {}
  affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: type
                operator: In
                values:
                - "ondemand"      
  volumeClaimTemplates:
  - metadata:
      name: mysql-data
    spec:
      accessModes: 
      - ReadWriteOnce
      storageClassName: gp2
      resources:
        requests:
          storage: 10Gi


---
apiVersion: v1
kind: Service
metadata:
  name: mysql-service
  labels:
    app: mysql
spec:
  ports:
  - port: 3306
    name: mysql
  clusterIP: None
  selector:
    app: mysql
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: deny-external-traffic
  namespace: default
spec:
  podSelector:
    matchLabels:
      app: mysql
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector: {}  # Internal traffic only